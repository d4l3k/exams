
CPSC 121 Midterm 1
Tuesday, October 11th, 2011
Name:
Student ID:
Signature:
Your signature acknowledges your understanding of and agreement to the rules below.
Question Marks
1
– You have 110 minutes to write the 14 questions on this examination. A total of 100 marks are available.

2
3

– You may have as an aide up to 3 textbooks and a 3 inch stack of
paper notes and nothing else. No electronic devices allowed; so,
no cell phones and no calculators.

4
5

– Keep your answers short. If you run out of space for a question,
you have likely written too much.

6

– The number in square brackets to the left of the question number
indicates the number of marks allocated for that question. Use
these to help you plan your use of time on the exam.

8

– Clearly indicate your answer to each problem. If your answer is
not in the provided blank, then indicate where the answer is, and
at the answer’s location indicate the question it addresses.
– Good luck!

7
9
10
11
12
13
14
Total

UNIVERSITY REGULATIONS:
– Each candidate should be prepared to produce, upon request, his/her UBC card.
– No candidate shall be permitted to enter the examination room after the expiration of one half
hour, or to leave during the first half hour of the examination.
– CAUTION: candidates guilty of any of the following, or similar, dishonest practices shall be
immediately dismissed from the examination and shall be liable to disciplinary action.
1. Having at the place of writing, or making use of, any books, papers or memoranda, electronic equipment, or other memory aid or communication devices, other than those authorised by the examiners.
2. Speaking or communicating with other candidates.
3. Purposely exposing written papers to the view of other candidates. The plea of accident or
forgetfulness shall not be received.
– Candidates must not destroy or mutilate any examination material; must hand in all examination
papers; and must not take any examination material from the examination room without permission of the invigilator.

page 2 out of 14
This page left intentionally (almost) blank.
If you write answers here (or anywhere other than their intended location), mark them clearly,
indicate which question they respond to, and indicate at the provided solution blank for that
question where you wrote your solution.

page 3 out of 14
[1] 1. Do you want tutorial attendance to be mandatory for you? If you answer “yes”, then 1% of
tuts attended
your course grade will be calculated with min(100%, tut
weeks−2 ). If you answer “no”, then
online quizzes will be worth 5% of your course grade rather than 4%. Either way, you get
credit for this problem.
Circle one:

YES

NO

[4] 2. Building combinational circuitry, without a story:
[2] a. Write a propositional logic expression that corresponds to the following truth table.
x
F
F
F
F
T
T
T
T

y
F
F
T
T
F
F
T
T

z
F
T
F
T
F
T
F
T

p
F
T
F
F
F
F
F
T

Expression:

[2] b. Given the following propositional logic expression, write the directly corresponding
circuit: (∼ a ∧ z) ∨ ∼ (b ∨ c ∨ z). Label the output out. Do not simplify.

page 4 out of 14
[3] 3. Complete the following truth table for the logical expression p ∧ (h → ∼ s), and then
answer the question below.
p
F
F
F
F
T
T
T
T

s
F
F
T
T
F
F
T
T

h
F
T
F
T
F
T
F
T

p ∧ (h → ∼ s)

Is p ∧ (h → ∼ s) a tautology, contradiction, or contingency?
Circle one:

TAUTOLOGY

CONTRADICTION

CONTINGENCY

[4] 4. Let s mean “your data is secure”, p mean “your password is strong”, and h mean “you hid
your password under your keyboard”.
[2] a. Translate the following from propositional logic into English: (p ∧ s) ∨ h

[2] b. Translate the following English statement into propositional logic. You need not
translate the sentence in parentheses; it’s only there to clarify the meaning of the
English statement.
If your password is weak or hidden under your keyboard, then your data
is not secure. (But a strong password and not hiding your password under
your keyboard don’t guarantee that your data is secure.)

page 5 out of 14
[3] 5. Every practical technology for implementing digital logic has its own limitations and peculiarities that propositional logic fails to model. Consider the following chip diagram from
the Magic Box Manual:

Give a shortcoming of propositional logic as a model of how difficult it is to wire a circuit
using this type of chip for (p ∧ q ∧ r ∧ s ∧ t) as compared to using it for (p ∧ q ∧ r ∧ s ∧ t ∧ u).

[7] 6. This problem focuses on the equivalence:
(∼ p ∨ s) ∧ (p → (s → ∼ p)) ≡ ∼ p
[6] a. Prove this equivalence. Use a formal logical equivalence proof, and start your proof
from the left-hand side of the equivalence.

[1] b. Is it possible to prove the equivalence starting from the right-hand side?
(a)
(b)
(c)
(d)

Yes, and it would likely have been easier.
Yes, but it’s often harder to work from the simple side to the complex side.
No, because a proof in that direction would not prove the logical equivalence.
No, because there’s no sequence of steps we can follow in that direction.

page 6 out of 14
[6] 7. Answer the following questions related to representing numbers.
[1] a. Convert the 5-bit unsigned binary number 01010 to a decimal number.
[1] b. Convert 01001011 to hexadecimal.
[1] c. Convert the 5-bit signed binary number 11010 to a decimal number.
[1] d. Convert -9 to a 5-bit signed binary number.
[1] e. Convert 4 to a 5-bit signed binary number.
[1] f. Add the 5-bit binary numbers 00101 and 10100 or explain why it is not possible to
add them without knowing whether to interpret them as signed numbers or unsigned
numbers.

[14] 8. Recall “Binary coded decimal” (BCD) from the assignment:
BCD represents k decimal digits using 4k bits in groups of 4. Each group of 4
represents a single digit (0–9). So, for example, 59 would be 01011001 in BCD,
a 5 (0101) followed by a 9 (1001).
[7] a. Design the logic statements for a circuit that adds 5 to a 1-digit (4-bit) BCD number
i1 i2 i3 i4 . Assume the input value is 4 or less; so, the output is 9 or less.
The rightmost bit of the output o4 = ∼ i4 . The second bit from the left
o2 = (∼ i2 ∧ ∼ i3 ∧ ∼ i4 ) ∨ (∼ i2 ∧ ∼ i3 ∧ i4 ) ∨ (∼ i2 ∧ i3 ∧ ∼ i4 ).
Give one statement for each of the other two bits of output o1 and o3 .

page 7 out of 14
[7] b. Design a circuit that takes a 2-digit (8-bit) BCD number c11 c12 c13 c14 c21 c22 c23 c24
as input and produces a 2-digit (8-bit) BCD number d11 d12 d13 d14 d21 d22 d23 d24 as
output, which is the input divided by 2. Drop the remainder; for example, the input
25 produces the output 12.
In your solution you can (and should) use your circuit from the previous part plus a
new one that inputs a 1-digit BCD number and outputs: (1) the result of dividing it
by 2 and (2) a remainder r that is 1 when the input is odd and 0 otherwise. Assume
both circuits work correctly, and represent them with the following two chip symbols:
The circuits from part a (left) and b (right) as chips:

38
Hint: solve 28
2 by hand—the easier version—and compare to solving 2 by hand—the
harder version. When did you divide digit(s) by 2 or add 5 (or maybe add 10 and
then divide by 5)? If you have to choose between two operations depending on which
version of the input you have, what circuit element can help?
Notes: for any multiplexer you use, indicate which of its inputs is the “0” input; use
but do not implement (draw the “gates inside”) either the div2 or +5 circuits here.

page 8 out of 14
[6] 9. For each of the following, apply the indicated rule to create an equivalent statement. (In
some cases, you may also need to apply commutativity, associativity, or double negation.
You need not write out these steps but should apply them if necessary to make the named
rule apply.)
[2] a. Apply distributivity to (p ∧ q) ∨ (∼ r ∧ q).

[2] b. Apply De Morgan’s to ∼ p ∧ r.

[2] c. Apply absorption to (p ∨ q ∨ r) ∧ (p ∨ r) ∧ (r ∨ ∼ s).

[12] 10. For each of the following, apply the indicated rule to create a statement that follows from
the given statements or indicate that the rule does not apply. (In some cases, you may also
need to apply commutativity, associativity, or double negation. You need not write out these
steps.)
[3] a. Apply modus ponens to a → (b ∧ c) and a.
Write your answer or circle “does not apply”:

DOES NOT APPLY

[3] b. Apply specialization to (p ∧ q) → r.
Write your answer or circle “does not apply”:

DOES NOT APPLY

[3] c. Apply proof by cases to (a ∨ b) → ∼ c and d → ∼ c.
Write your answer or circle “does not apply”:

DOES NOT APPLY

[3] d. Apply generalization to p → q.
Write your answer or circle “does not apply”:

DOES NOT APPLY

page 9 out of 14
[4] 11. Base64 is a scheme for encoding binary data using normal text, such as storing data in
XML files (a text file format often used for web applications). In Base64, 64 characters—
like the letters a–z, A–Z, 0–9, +, and /—represent the numbers 0–63. For example, the bit
pattern 010010010110000101101111 might be represented by the characters “SWFv”.
[2] a. Why choose 64 characters rather than using just the “standard” 62 characters a–z,
A–Z, and 0–9?

[2] b. Is there any data that can be encoded in normal binary that cannot be encoded as
Base64 data? Briefly justify your answer.

[6] 12. Consider the predicates Odd(x) meaning “x is an odd integer” and Prime(x) meaning “x
is a prime integer” and the set of positive integers Z+ . For each statement below, indicate
whether the answer is true or false.
[2] a. ∀x ∈ Z+ , Prime(x) ∨ Odd(x)
Circle one:
TRUE
Z+ , ∼ Odd(x)

[2] b. ∃x ∈
Circle one:

∧ Prime(x/2)
TRUE

[2] c. ∃x ∈ Z+ , (∼ Odd(x) ∧ x > 2) → Prime(x)
Circle one:
TRUE

FALSE
FALSE
FALSE

page 10 out of 14
[15] 13. [5] a. Prove using logical equivalences that p → (q → p) is a tautalogy.

[8] b. Prove b using a formal propositional logic proof given the five numbered premises
below:
1. (∼ p ∨ q) → p

premise

2. ∼ r → ∼ p

premise

3. ∼ (r ∧ ∼ a)

premise

4. (∼ a ∨ b)

premise

5. (q ∨ s) → t

premise

[2] c. Assuming your proofs are correct, what do they establish? Circle all that apply.
(a)
(b)
(c)
(d)
(e)

That p → (q → p) is true.
That p → (q → p) is false.
That b is true.
That b is false.
None of these.

page 11 out of 14
[15] 14. A “secure hash algorithm” takes a number as input and produces another number as output.
Among other things, secure hash algorithms are used for storing passwords.
In this problem, all numbers are non-negative integers (from Z0 ), and all people are from
the set P . The predicate SHA(x, y) means “the output of the secure hash algorithm run on
x is y”, and Knows(p, y) means “person p knows an input to the secure hash algorithm that
produces y as an output”.
[5] a. Using the predicates above, write the statement “for each input to the secure hash
algorithm, there is exactly one unique output” in predicate logic. As always, feel free
to define and use helper predicates.

[5] b. The SHA algorithm outputs a 256-bit number. Using the predicates above, write the
statement “no output of the secure hash algorithm is too large to fit in an unsigned
256-bit number” in predicate logic. Use exponentiation (write ab to mean “a raised
to the power of b”) and relational operators (<, ≤, =, ≥, and >) if you need them.

[5] c. Define a new predicate Secure(p, x) in terms of the predicates above that means “no
one other than p knows any input that produces the result of running the secure hash
algorithm on x”.

Secure(p, x) ≡

page 12 out of 14
This page left intentionally (almost) blank.
If you write answers here (or anywhere other than their intended location), mark them clearly,
indicate which question they respond to, and indicate at the provided solution blank for that
question where you wrote your solution.

page 13 out of 14
This page left intentionally (almost) blank.
If you write answers here (or anywhere other than their intended location), mark them clearly,
indicate which question they respond to, and indicate at the provided solution blank for that
question where you wrote your solution.

page 14 out of 14
This page left intentionally (almost) blank.
If you write answers here (or anywhere other than their intended location), mark them clearly,
indicate which question they respond to, and indicate at the provided solution blank for that
question where you wrote your solution.

